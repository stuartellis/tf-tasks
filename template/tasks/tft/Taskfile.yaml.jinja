---
# SPDX-FileCopyrightText: [[ copyright_date ]]-present [[ maintainer_fullname ]] <[[ maintainer_email ]]>
#
# SPDX-License-Identifier: MIT
#
# Maintained by Copier: DO NOT EDIT THIS FILE
#
# These are Terraform and OpenTofu tasks for the Task runner:
#
# https://taskfile.dev
#
# Requirements:
#
# - Git
# - Any UNIX shell, such as Bash or Fish
# - Terraform or OpenTofu
#
# It requires these environment variables to work on a unit:
#
# TFT_CONTEXT - TF configuration
# TFT_UNIT    - Name of unit
#
# Set these variables to override the defaults:
#
# TFT_PRODUCT_NAME   - Name of project
# TFT_CLI_EXE        - The Terraform or OpenTofu executable to use
# TFT_TRACK        - Name of TF workspace
# TFT_REMOTE_BACKEND - Set TFT_REMOTE_BACKEND to "false" to force the use of local TF state:
#
# TFT_REMOTE_BACKEND=false
#
# yamllint disable rule:line-length

version: "3"

## Variables ##

vars:
  # Defaults
  DEFAULT_TFT_CLI_EXE: terraform
  DEFAULT_TFT_TRACK: default
  DEFAULT_TFT_PRODUCT_NAME:
    ref: "base .ROOT_DIR"

  # Variables to override

  # Override with TFT_CLI_EXE to specify the Terraform or OpenTofu executable
  # To use OpenTofu, specify: TFT_CLI_EXE=tofu
  CURRENT_TFT_CLI_EXE:
    ref: "default .DEFAULT_TFT_CLI_EXE .TFT_CLI_EXE"
  # Override with TFT_TRACK to specify the name of the TF workspace
  CURRENT_TFT_TRACK:
    ref: "default .DEFAULT_TFT_TRACK .TFT_TRACK"
  # Override with TFT_PRODUCT_NAME to specify the name of the product or project
  CURRENT_TFT_PRODUCT_NAME:
    ref: "default .DEFAULT_TFT_PRODUCT_NAME .TFT_PRODUCT_NAME"

  # Pre-set variables
  TFT_ROOT_DIR: tf
  TFT_SHARED_CONTEXT: all
  TFT_TEMPLATE_NAME: template

  # Calculated variables

  TFT_CONTEXTS_DIR: "{{.ROOT_DIR}}/{{.TFT_ROOT_DIR}}/contexts"
  TFT_UNITS_DIR: "{{.ROOT_DIR}}/{{.TFT_ROOT_DIR}}/units"
  TFT_UNIT_DIR: "{{.TFT_UNITS_DIR}}/{{.TFT_UNIT}}"
  TFT_TMP_DIR: "{{.ROOT_DIR}}/tmp/{{.TFT_ROOT_DIR}}"

  TFT_CLI_CHDIR_OPT: "-chdir={{.TFT_UNIT_DIR}}"
  TFT_CLI_VAR_FILES_OPT: "-var-file={{.TFT_CONTEXTS_DIR}}/{{.TFT_SHARED_CONTEXT}}/{{.TFT_UNIT}}.tfvars -var-file={{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/{{.TFT_UNIT}}.tfvars"

  TFT_CONTEXTS:
    sh: ls -d {{.TFT_CONTEXTS_DIR}}/*/ | xargs -n 1 basename
  TFT_CONTEXTS_LIST:
    ref: 'splitList "\n" .TFT_CONTEXTS'
  TFT_FILTERED_TFT_CONTEXTS:
    ref: "without .TFT_CONTEXTS_LIST .TFT_SHARED_CONTEXT .TFT_TEMPLATE_NAME"

  TFT_UNITS:
    sh: ls -d {{.TFT_UNITS_DIR}}/*/ | xargs -n 1 basename
  TFT_UNITS_LIST:
    ref: 'splitList "\n" .TFT_UNITS'
  TFT_FILTERED_UNITS:
    ref: "without .TFT_UNITS_LIST .TFT_TEMPLATE_NAME"

env:
  TF_WORKSPACE: "{{.CURRENT_TFT_TRACK}}"

## Tasks ##

tasks:
  apply:
    desc: Apply TF unit
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} apply {{.TFT_CLI_PLAN_PATH}}.tfplan"
    requires:
      vars: [TFT_CONTEXT, TFT_UNIT]
    vars:
      TFT_CONTEXT_DOCUMENT:
        sh: cat {{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/context.json
      TFT_CONTEXT_CONFIG:
        ref: "fromJson .TFT_CONTEXT_DOCUMENT"
      TFT_CLI_PLAN_PATH: "{{.TFT_TMP_DIR}}/{{.CURRENT_TFT_PRODUCT_NAME}}-{{.TFT_UNIT}}-{{.TFT_CONTEXT_CONFIG.metadata.environment}}-{{.CURRENT_TFT_TRACK}}"

  check-fmt:
    desc: Check formatting of TF code for unit
    cmds:
      - for:
          var: TFT_FILTERED_TFT_CONTEXTS
        cmd: "{{.CURRENT_TFT_CLI_EXE}} fmt -check -diff -recursive {{.TFT_CONTEXTS_DIR}}/{{.ITEM}}/{{.TFT_UNIT}}.tfvars"
      - cmd: "{{.CURRENT_TFT_CLI_EXE}} fmt -check -diff -recursive {{.TFT_CONTEXTS_DIR}}/{{.TFT_SHARED_CONTEXT}}/{{.TFT_UNIT}}.tfvars"
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} fmt -check -diff -recursive"
    requires:
      vars: [TFT_UNIT]

  clean:
    desc: Clean TF unit
    cmds:
      - "rm -fr {{.TFT_UNIT_DIR}}/.terraform"
      - "rm -f {{.TFT_TMP_DIR}}/{{.CURRENT_TFT_PRODUCT_NAME}}-{{.TFT_UNIT}}-*.tfplan"
      - "rm -f {{.TFT_TMP_DIR}}/{{.CURRENT_TFT_PRODUCT_NAME}}-{{.TFT_UNIT}}-*.json"
    requires:
      vars: [TFT_UNIT]

  console:
    desc: TF console for unit
    aliases:
      - shell
    interactive: true
    cmds:
      - terraform {{.TFT_CLI_CHDIR_OPT}} console {{.TFT_CLI_VARS_OPT}} {{.TFT_CLI_VAR_FILES_OPT}}
    requires:
      vars: [TFT_CONTEXT, CURRENT_TFT_PRODUCT_NAME, TFT_UNIT, CURRENT_TFT_TRACK]
    vars:
      TFT_CONTEXT_DOCUMENT:
        sh: cat {{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/context.json
      TFT_CONTEXT_CONFIG:
        ref: "fromJson .TFT_CONTEXT_DOCUMENT"
      TFT_CLI_VARS_OPT: "-var='product_name={{.CURRENT_TFT_PRODUCT_NAME}}' -var='unit_name={{.TFT_UNIT}}' -var='environment_name={{.TFT_CONTEXT_CONFIG.metadata.environment}}' -var='track={{.CURRENT_TFT_TRACK}}'"

  destroy:
    desc: Destroy resources for TF unit
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} apply -destroy -auto-approve {{.TFT_CLI_VARS_OPT}} {{.TFT_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [TFT_CONTEXT, CURRENT_TFT_PRODUCT_NAME, TFT_UNIT, CURRENT_TFT_TRACK]
    vars:
      TFT_CONTEXT_DOCUMENT:
        sh: cat {{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/context.json
      TFT_CONTEXT_CONFIG:
        ref: "fromJson .TFT_CONTEXT_DOCUMENT"
      TFT_CLI_VARS_OPT: "-var='product_name={{.CURRENT_TFT_PRODUCT_NAME}}' -var='unit_name={{.TFT_UNIT}}' -var='environment_name={{.TFT_CONTEXT_CONFIG.metadata.environment}}' -var='track={{.CURRENT_TFT_TRACK}}'"

  fmt:
    desc: Format code for TF unit
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} fmt"
      - for:
          var: TFT_FILTERED_TFT_CONTEXTS
        cmd: "{{.CURRENT_TFT_CLI_EXE}} fmt {{.TFT_CONTEXTS_DIR}}/{{.ITEM}}/{{.TFT_UNIT}}.tfvars"
      - cmd: "{{.CURRENT_TFT_CLI_EXE}} fmt {{.TFT_CONTEXTS_DIR}}/{{.TFT_SHARED_CONTEXT}}/{{.TFT_UNIT}}.tfvars"
    requires:
      vars: [TFT_UNIT]

  forget:
    desc: Delete a track from TF remote backend
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} workspace delete {{.TFT_TRACK}}"
    requires:
      vars: [TFT_UNIT, TFT_TRACK]
    env:
      TF_WORKSPACE: "{{.DEFAULT_TFT_TRACK}}"

  new:
    desc: Create a new TF unit
    cmds:
      - cp -r "{{.TFT_UNITS_DIR}}/template" "{{.TFT_UNITS_DIR}}/{{.TFT_UNIT}}"
      - for:
          var: TFT_FILTERED_TFT_CONTEXTS
        cmd: cp "{{.TFT_CONTEXTS_DIR}}/template/standard.tfvars" "{{.TFT_CONTEXTS_DIR}}/{{.ITEM}}/{{.TFT_UNIT}}.tfvars"
      - cmd: cp "{{.TFT_CONTEXTS_DIR}}/template/all.tfvars" "{{.TFT_CONTEXTS_DIR}}/{{.TFT_SHARED_CONTEXT}}/{{.TFT_UNIT}}.tfvars"
    requires:
      vars: [TFT_UNIT]

  plan:
    desc: Create TF plan for unit
    cmds:
      - mkdir -p "{{.TFT_TMP_DIR}}"
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} plan -out={{.TFT_CLI_PLAN_PATH}}.tfplan {{.TFT_CLI_VARS_OPT}} {{.TFT_CLI_VAR_FILES_OPT}}"
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} show -json {{.TFT_CLI_PLAN_PATH}}.tfplan > {{.TFT_CLI_PLAN_PATH}}.json"
    requires:
      vars: [TFT_CONTEXT, CURRENT_TFT_PRODUCT_NAME, TFT_UNIT, CURRENT_TFT_TRACK]
    vars:
      TFT_CONTEXT_DOCUMENT:
        sh: cat {{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/context.json
      TFT_CONTEXT_CONFIG:
        ref: "fromJson .TFT_CONTEXT_DOCUMENT"
      TFT_CLI_PLAN_PATH: "{{.TFT_TMP_DIR}}/{{.CURRENT_TFT_PRODUCT_NAME}}-{{.TFT_UNIT}}-{{.TFT_CONTEXT_CONFIG.metadata.environment}}-{{.CURRENT_TFT_TRACK}}"
      TFT_CLI_VARS_OPT: "-var='product_name={{.CURRENT_TFT_PRODUCT_NAME}}' -var='unit_name={{.TFT_UNIT}}' -var='environment_name={{.TFT_CONTEXT_CONFIG.metadata.environment}}' -var='track={{.CURRENT_TFT_TRACK}}'"

  rm:
    desc: Remove code for TF unit
    cmds:
      - rm -fr "{{.TFT_UNITS_DIR}}/{{.TFT_UNIT}}"
      - for:
          var: TFT_FILTERED_TFT_CONTEXTS
        cmd: rm -f "{{.TFT_CONTEXTS_DIR}}/{{.ITEM}}/{{.TFT_UNIT}}.tfvars"
    requires:
      vars: [TFT_UNIT]

  units:
    desc: List TF units
    aliases:
      - units
    silent: true
    cmds:
      - for:
          var: TFT_FILTERED_UNITS
        cmd: echo "{{.ITEM}}"

  test:
    desc: Run TF test for unit
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} test {{.TFT_CLI_VARS_OPT}} {{.TFT_CLI_VAR_FILES_OPT}}"
    requires:
      vars: [TFT_CONTEXT, CURRENT_TFT_PRODUCT_NAME, TFT_UNIT, CURRENT_TFT_TRACK]
    vars:
      TFT_CONTEXT_DOCUMENT:
        sh: cat {{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/context.json
      TFT_CONTEXT_CONFIG:
        ref: "fromJson .TFT_CONTEXT_DOCUMENT"
      TFT_CLI_VARS_OPT: "-var='product_name={{.CURRENT_TFT_PRODUCT_NAME}}' -var='unit_name={{.TFT_UNIT}}' -var='environment_name={{.TFT_CONTEXT_CONFIG.metadata.environment}}' -var='track={{.CURRENT_TFT_TRACK}}'"

  validate:
    desc: Validate TF unit
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} validate"
    requires:
      vars: [TFT_UNIT]

  ## Context tasks ##

  context:list:
    desc: List contexts
    aliases:
      - contexts
    silent: true
    cmds:
      - for:
          var: TFT_FILTERED_TFT_CONTEXTS
        cmd: echo "{{.ITEM}}"

  context:new:
    desc: Create a new TF context
    cmds:
      - mkdir -p "{{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}"
      - for:
          var: TFT_FILTERED_UNITS
        cmd: cp "{{.TFT_CONTEXTS_DIR}}/template/standard.tfvars" "{{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/{{.ITEM}}.tfvars"
      - cp "{{.TFT_CONTEXTS_DIR}}/template/context.json" "{{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}"
    requires:
      vars: [TFT_CONTEXT]

  context:rm:
    desc: Remove a TF context
    cmds:
      - rm -fr "{{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}"
    requires:
      vars: [TFT_CONTEXT]

  ## TF initialization tasks ##

  init:local:
    desc: Initialise local state for TF unit
    deps: [clean]
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} init -input=false"
    requires:
      vars: [TFT_CONTEXT, TFT_UNIT]

  init:s3:
    desc: Initialise S3 remote state for TF unit
    aliases:
      - init
    deps: [clean]
    cmds:
      - "{{.CURRENT_TFT_CLI_EXE}} {{.TFT_CLI_CHDIR_OPT}} init -input=false {{.TFT_CLI_BACKEND_OPT}}"
    requires:
      vars: [TFT_CONTEXT, TFT_UNIT]
    vars:
      TFT_CLI_BACKEND_DOCUMENT:
        sh: cat {{.TFT_CONTEXTS_DIR}}/{{.TFT_CONTEXT}}/context.json
      TFT_CLI_BACKEND_CONFIG:
        ref: "fromJson .TFT_CLI_BACKEND_DOCUMENT"
      TFT_CLI_BACKEND_S3_OPT: >
        -backend-config=\"encrypt=true\"
        -backend-config=\"workspace_key_prefix=workspaces\"
        -backend-config=\"assume_role={role_arn=\\\"{{.TFT_CLI_BACKEND_CONFIG.backend_s3.role_arn}}\\\"}\"
        -backend-config=\"region={{.TFT_CLI_BACKEND_CONFIG.backend_s3.region}}\"
        -backend-config=\"bucket={{.TFT_CLI_BACKEND_CONFIG.backend_s3.tfstate_bucket}}\"
        -backend-config=\"dynamodb_table={{.TFT_CLI_BACKEND_CONFIG.backend_s3.tfstate_ddb_table}}\"
        -backend-config=\"key=tft/{{.CURRENT_TFT_PRODUCT_NAME}}/{{.TFT_CLI_BACKEND_CONFIG.backend_s3.tfstate_dir}}/{{.TFT_UNIT}}.tfstate\"
      TFT_CLI_BACKEND_OPT:
        sh: echo {{if eq .TFT_REMOTE_BACKEND "false"}}{{else}}{{.TFT_CLI_BACKEND_S3_OPT}}{{end}}
